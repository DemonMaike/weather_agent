"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ReAct –∞–≥–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π MCP —á–µ—Ä–µ–∑ MultiServerMCPClient
"""
import asyncio
import os
import sys
import uuid
from pathlib import Path
from typing import Optional, List, Dict, Any

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.messages import HumanMessage, AIMessage
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import InMemorySaver

# –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
from langchain_mcp_adapters.client import MultiServerMCPClient

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs

    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stdin.reconfigure(encoding='utf-8')
    except AttributeError:
        try:
            sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
            sys.stdin = codecs.getreader("utf-8")(sys.stdin.detach())
        except:
            pass

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

try:
    from src.utils.config import settings
except ImportError:
    class Settings:
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")


    settings = Settings()


class ModernLangChainReActAgent:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π ReAct –∞–≥–µ–Ω—Ç —Å MultiServerMCPClient
    """

    def __init__(self, api_key: Optional[str] = None, max_iterations: int = 20,
                 server_path: str = "weather_mcp/server.py"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        self.server_path = server_path
        self.max_iterations = max_iterations
        self.agent = None
        self.tools: List = []
        self.initialized = False
        self.mcp_client: Optional[MultiServerMCPClient] = None

        # –ü–∞–º—è—Ç—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        self.memory = InMemorySaver()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        self.api_key = api_key or getattr(settings, 'GOOGLE_API_KEY', None)
        if not self.api_key:
            raise ValueError(
                "Google Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ https://aistudio.google.com/app/apikey\n"
                "–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GOOGLE_API_KEY"
            )

        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Google Gemini
        try:
            self.model = ChatGoogleGenerativeAI(
                model=settings.LLM_MODEL,
                google_api_key=self.api_key,
                temperature=0.1,
                max_tokens=2048
            )
            print("‚úÖ Google Gemini –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Gemini: {e}")

        print("‚úÖ ReAct –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _resolve_server_path(self, server_path: str) -> Path:
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        current_dir = Path(__file__).parent

        possible_paths = [
            current_dir / server_path,
            current_dir / "weather_mcp" / "server.py",
            current_dir.parent / "weather_mcp" / "server.py",
            current_dir.parent.parent / "weather_mcp" / "server.py",
            current_dir.parent / "mcp_weather_server.py",
            current_dir.parent.parent / "mcp_weather_server.py",
            Path(server_path).resolve()
        ]

        for path in possible_paths:
            if path.exists():
                print(f"üéØ –ù–∞–π–¥–µ–Ω MCP —Å–µ—Ä–≤–µ—Ä: {path}")
                return path

        print(f"‚ö†Ô∏è MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º: {server_path}")
        return Path(server_path).resolve()

    async def initialize_mcp(self) -> bool:
        """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å MultiServerMCPClient"""
        if self.initialized:
            print("‚ÑπÔ∏è MCP —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        try:
            server_path_abs = self._resolve_server_path(self.server_path)
            print(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ MultiServerMCPClient: {server_path_abs}")

            # –°–æ–∑–¥–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç
            self.mcp_client = MultiServerMCPClient({
                "weather": {
                    "command": sys.executable,
                    "args": [str(server_path_abs)],
                    "transport": "stdio"
                }
            })

            print("üîß –ó–∞–≥—Ä—É–∑–∫–∞ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - —ç—Ç–æ –≤—Å–µ —á—Ç–æ –Ω—É–∂–Ω–æ!
            self.tools = await self.mcp_client.get_tools()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.tools)} MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {[t.name for t in self.tools]}")

            # –°–æ–∑–¥–∞–µ–º ReAct –∞–≥–µ–Ω—Ç
            print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ ReAct –∞–≥–µ–Ω—Ç–∞...")
            self.agent = create_react_agent(
                model=self.model,
                tools=self.tools,
                checkpointer=self.memory,
                state_modifier=(
                    "–¢—ã —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    "–í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç get_weather –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–≥–æ–¥–µ. "
                    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–∞–º–µ—Ç—Ä count_days. "
                    "–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! "
                    "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ."
                )
            )

            self.initialized = True
            print("üéâ ReAct –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP: {e}")
            await self.cleanup_mcp()
            return False

    async def chat(self, user_input: str, thread_id: Optional[str] = None) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        if not self.initialized:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP...")
            success = await self.initialize_mcp()
            if not success:
                return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É."

        try:
            if thread_id is None:
                thread_id = str(uuid.uuid4())

            config = {
                "configurable": {"thread_id": thread_id},
                "recursion_limit": self.max_iterations
            }

            print(f"üí≠ –û–±—Ä–∞–±–æ—Ç–∫–∞: {user_input[:50]}{'...' if len(user_input) > 50 else ''}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç —Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            response = await self.agent.ainvoke(
                {"messages": [HumanMessage(content=user_input)]},
                config=config
            )

            if response and "messages" in response:
                last_message = response["messages"][-1]
                if isinstance(last_message, AIMessage):
                    return last_message.content
                elif hasattr(last_message, 'content'):
                    return str(last_message.content)

            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞"

        except Exception as e:
            print(f"üêõ DEBUG: –û—à–∏–±–∫–∞ –≤ chat: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    async def get_conversation_history(self, thread_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        try:
            config = {"configurable": {"thread_id": thread_id}}

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –≥—Ä–∞—Ñ–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state = await self.agent.aget_state(config)

            if state and hasattr(state, 'values') and "messages" in state.values:
                history = []
                for msg in state.values["messages"]:
                    history.append({
                        "type": type(msg).__name__,
                        "content": msg.content[:200] + "..." if len(str(msg.content)) > 200 else msg.content,
                        "timestamp": getattr(msg, 'additional_kwargs', {}).get('timestamp', None)
                    })
                return history
            else:
                return [{"info": f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ {thread_id[:8]}... –ø—É—Å—Ç–∞"}]

        except Exception as e:
            print(f"üêõ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return [{"error": f"–û—à–∏–±–∫–∞: {str(e)}"}]

    async def clear_memory(self, thread_id: str) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            config = {"configurable": {"thread_id": thread_id}}
            await self.memory.adelete_state(config)
            print(f"üßπ –ü–∞–º—è—Ç—å –ø–æ—Ç–æ–∫–∞ {thread_id[:8]}... –æ—á–∏—â–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"üêõ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False

    async def get_available_tools(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.initialized:
            await self.initialize_mcp()

        return [tool.name for tool in self.tools] if self.tools else []

    async def cleanup_mcp(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ MCP —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # MultiServerMCPClient –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
            if hasattr(self, 'mcp_client') and self.mcp_client:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ close, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if hasattr(self.mcp_client, 'close'):
                    await self.mcp_client.close()
                self.mcp_client = None
                print("üßπ MCP –∫–ª–∏–µ–Ω—Ç –æ—á–∏—â–µ–Ω")

            if hasattr(self, 'initialized'):
                self.initialized = False
            if hasattr(self, 'tools'):
                self.tools = []
            if hasattr(self, 'agent'):
                self.agent = None

            print("‚úÖ –í—Å–µ MCP —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            print(f"üêõ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ MCP: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
            self.mcp_client = None
            self.initialized = False

    def __del__(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        try:
            if hasattr(self, 'initialized') and getattr(self, 'initialized', False):
                self.initialized = False
        except:
            pass

    async def __aenter__(self):
        """Context manager entry"""
        if not self.initialized:
            await self.initialize_mcp()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit - –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã"""
        await self.cleanup_mcp()


async def create_modern_weather_agent(
        api_key: Optional[str] = None,
        with_mcp: bool = True,
        server_path: str = "weather_mcp/server.py",
        max_iterations: int = 20
) -> ModernLangChainReActAgent:
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    agent = ModernLangChainReActAgent(
        api_key=api_key,
        max_iterations=max_iterations,
        server_path=server_path
    )

    if with_mcp:
        await agent.initialize_mcp()

    return agent


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üå§Ô∏è –ó–∞–ø—É—Å–∫ Modern ReAct Weather Agent...")
    print("=" * 60)

    try:
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
        agent = await create_modern_weather_agent()

        if not agent.initialized:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç")
            return

        session_id = str(uuid.uuid4())
        tools_list = await agent.get_available_tools()

        print("\nüéâ Modern ReAct Weather Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tools_list}")
        print(f"üÜî Session ID: {session_id[:8]}...")
        print("\nüìù –ö–æ–º–∞–Ω–¥—ã:")
        print("  ‚Ä¢ 'exit', 'quit', '–≤—ã—Ö–æ–¥' - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
        print("  ‚Ä¢ 'clear', '–æ—á–∏—Å—Ç–∏—Ç—å' - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")
        print("  ‚Ä¢ 'new', '–Ω–æ–≤—ã–π' - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        print("  ‚Ä¢ 'history', '–∏—Å—Ç–æ—Ä–∏—è' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")
        print("  ‚Ä¢ 'tools', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        print("=" * 60)
        print("\nüó£Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç...")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        while True:
            try:
                user_input = input("\nüßë –í—ã: ").strip()

                if not user_input:
                    continue

                if user_input.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                elif user_input.lower() in ['clear', '–æ—á–∏—Å—Ç–∏—Ç—å', 'c']:
                    success = await agent.clear_memory(session_id)
                    if success:
                        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
                    continue

                elif user_input.lower() in ['new', '–Ω–æ–≤—ã–π', 'n']:
                    session_id = str(uuid.uuid4())
                    print(f"üÜï –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id[:8]}...")
                    continue

                elif user_input.lower() in ['history', '–∏—Å—Ç–æ—Ä–∏—è', 'h']:
                    history = await agent.get_conversation_history(session_id)
                    if history and len(history) > 0:
                        print("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
                        for i, msg in enumerate(history[-5:], 1):
                            msg_type = msg.get('type', 'Unknown')
                            content = str(msg.get('content', ''))
                            if len(content) > 100:
                                content = content[:100] + "..."
                            print(f"  {i}. {msg_type}: {content}")
                    else:
                        print("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞")
                    continue

                elif user_input.lower() in ['tools', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 't']:
                    tools = await agent.get_available_tools()
                    if tools:
                        print(f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tools)}")
                    else:
                        print("üîß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                    continue

                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
                print("ü§ñ –ê–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å...")
                response = await agent.chat(user_input, thread_id=session_id)
                print(f"\nü§ñ –ê–≥–µ–Ω—Ç: {response}")

            except KeyboardInterrupt:
                print("\n\nüëã –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (Ctrl+C)")
                break

            except EOFError:
                print("\n\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ EOF")
                break

            except UnicodeDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: chcp 65001 (Windows)")
                continue

            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                continue

        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        await agent.cleanup_mcp()
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  1. GOOGLE_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("  2. MCP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("  3. –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


if __name__ == "__main__":
    asyncio.run(main())

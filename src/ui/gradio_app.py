"""
Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Weather Agent
"""
import asyncio
import threading
import gradio as gr
import uuid
import os
import sys
import json
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Any
import concurrent.futures

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

# –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
os.chdir(project_root)
print(f"üóÇÔ∏è –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"üóÇÔ∏è –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")

from src.agent.react_agent import ModernLangChainReActAgent, create_modern_weather_agent

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
_loop = None
_executor = None

def get_event_loop():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop"""
    global _loop, _executor
    if _loop is None or _loop.is_closed():
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_loop():
            global _loop
            _loop = asyncio.new_event_loop()
            asyncio.set_event_loop(_loop)
            _loop.run_forever()
        
        loop_thread = threading.Thread(target=run_loop, daemon=True)
        loop_thread.start()
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ loop –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω
        import time
        while _loop is None:
            time.sleep(0.01)
            
        _executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)
    
    return _loop

def run_async(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º event loop"""
    loop = get_event_loop()
    future = asyncio.run_coroutine_threadsafe(coro, loop)
    return future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç


class WeatherAgentUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self):
        self.agent: Optional[ModernLangChainReActAgent] = None
        self.sessions: Dict[str, str] = {}  # session_name -> session_id
        self.current_session = "default"
        self.is_initialized = False
        self.chat_history: Dict[str, List[Tuple[str, str]]] = {"default": []}
        
    async def initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if not self.is_initialized:
            try:
                print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
                self.agent = await create_modern_weather_agent()
                self.is_initialized = True
                if "default" not in self.sessions:
                    self.sessions["default"] = str(uuid.uuid4())
                print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                return "‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!", self._get_session_info()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}", ""
        return "‚ÑπÔ∏è –ê–≥–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", self._get_session_info()
    
    async def _extract_tool_usage(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö"""
        try:
            if self.agent and self.current_session in self.sessions:
                session_id = self.sessions[self.current_session]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                config = {"configurable": {"thread_id": session_id}}
                state = await self.agent.agent.aget_state(config)
                
                if state and hasattr(state, 'values') and "messages" in state.values:
                    messages = state.values["messages"]
                    
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ tool calls –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    used_tools = []
                    for msg in reversed(messages[-5:]):  # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                        if hasattr(msg, 'tool_calls') and msg.tool_calls:
                            for tool_call in msg.tool_calls:
                                if hasattr(tool_call, 'name'):
                                    used_tools.append(tool_call.name)
                        elif hasattr(msg, 'additional_kwargs') and 'tool_calls' in msg.additional_kwargs:
                            for tool_call in msg.additional_kwargs['tool_calls']:
                                if 'function' in tool_call and 'name' in tool_call['function']:
                                    used_tools.append(tool_call['function']['name'])
                    
                    if used_tools:
                        unique_tools = list(set(used_tools))
                        return f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(unique_tools)}\n\n"
                
        except Exception as e:
            print(f"üêõ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        return ""
    
    def _get_session_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if self.current_session in self.sessions:
            session_id = self.sessions[self.current_session]
            return f"üÜî –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {self.current_session} ({session_id[:8]}...)"
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"
    
    async def chat_with_agent(self, message: str, history: List[Tuple[str, str]]) -> Tuple[str, List[Tuple[str, str]]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.is_initialized or not self.agent:
            print("üîÑ –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é...")
            init_result, _ = await self.initialize_agent()
            if "‚ùå" in init_result:
                return init_result, history
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
        if self.current_session not in self.sessions:
            self.sessions[self.current_session] = str(uuid.uuid4())
            
        try:
            session_id = self.sessions[self.current_session]
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            print(f"üí≠ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É: {message[:50]}...")
            response = await self.agent.chat(message, thread_id=session_id)
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            tools_info = await self._extract_tool_usage(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            formatted_response = f"[{timestamp}] {tools_info}{response}"
            history.append((message, formatted_response))
            self.chat_history[self.current_session] = history
            
            return "", history
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            history.append((message, error_msg))
            return "", history
    
    async def create_new_session(self, session_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not session_name.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏", [], self._get_session_info()
        
        session_name = session_name.strip()
        if session_name in self.sessions:
            return f"‚ùå –°–µ—Å—Å–∏—è '{session_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", [], self._get_session_info()
        
        self.sessions[session_name] = str(uuid.uuid4())
        self.current_session = session_name
        self.chat_history[session_name] = []
        
        return f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_name}", [], self._get_session_info()
    
    async def switch_session(self, session_name: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏"""
        if session_name not in self.sessions:
            return f"‚ùå –°–µ—Å—Å–∏—è '{session_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", [], self._get_session_info()
        
        self.current_session = session_name
        history = self.chat_history.get(session_name, [])
        
        return f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–µ—Å—Å–∏—é: {session_name}", history, self._get_session_info()
    
    async def clear_current_session(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if self.agent and self.current_session in self.sessions:
            session_id = self.sessions[self.current_session]
            await self.agent.clear_memory(session_id)
        
        self.chat_history[self.current_session] = []
        return [], f"üßπ –°–µ—Å—Å–∏—è '{self.current_session}' –æ—á–∏—â–µ–Ω–∞"
    
    async def delete_session(self, session_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if session_name == "default":
            return "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", self._get_session_info()
        
        if session_name not in self.sessions:
            return f"‚ùå –°–µ—Å—Å–∏—è '{session_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", self._get_session_info()
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞
        if self.agent:
            session_id = self.sessions[session_name]
            await self.agent.clear_memory(session_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        del self.sessions[session_name]
        if session_name in self.chat_history:
            del self.chat_history[session_name]
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ default –µ—Å–ª–∏ —É–¥–∞–ª—è–ª–∏ —Ç–µ–∫—É—â—É—é
        if self.current_session == session_name:
            self.current_session = "default"
            if "default" not in self.sessions:
                self.sessions["default"] = str(uuid.uuid4())
                self.chat_history["default"] = []
        
        return f"‚úÖ –°–µ—Å—Å–∏—è '{session_name}' —É–¥–∞–ª–µ–Ω–∞", self._get_session_info()
    
    def get_sessions_list(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π"""
        return list(self.sessions.keys())
    
    async def get_available_tools(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.is_initialized or not self.agent:
            await self.initialize_agent()
        
        if self.agent:
            tools = await self.agent.get_available_tools()
            return f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tools)}" if tools else "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
        return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    async def export_session_history(self, session_name: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏ –≤ JSON"""
        if session_name not in self.chat_history:
            return "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        history = self.chat_history[session_name]
        export_data = {
            "session_name": session_name,
            "session_id": self.sessions.get(session_name, "unknown"),
            "export_time": datetime.now().isoformat(),
            "messages_count": len(history),
            "history": [{"user": msg[0], "agent": msg[1]} for msg in history]
        }
        
        filename = f"chat_history_{session_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            return f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä UI
ui_instance = WeatherAgentUI()


def sync_chat_wrapper(message, history):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —á–∞—Ç–∞"""
    return run_async(ui_instance.chat_with_agent(message, history))


def sync_clear_wrapper():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    history, status = run_async(ui_instance.clear_current_session())
    return history, status


def sync_new_session_wrapper(session_name):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    status, history, session_info = run_async(ui_instance.create_new_session(session_name))
    return status, history, session_info, gr.Dropdown(choices=ui_instance.get_sessions_list(), value=ui_instance.current_session)


def sync_switch_session_wrapper(session_name):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    status, history, session_info = run_async(ui_instance.switch_session(session_name))
    return status, history, session_info


def sync_delete_session_wrapper(session_name):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    status, session_info = run_async(ui_instance.delete_session(session_name))
    current_history = ui_instance.chat_history.get(ui_instance.current_session, [])
    return status, session_info, current_history, gr.Dropdown(choices=ui_instance.get_sessions_list(), value=ui_instance.current_session)


def sync_export_wrapper(session_name):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    return run_async(ui_instance.export_session_history(session_name))


def create_gradio_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    with gr.Blocks(
        title="üå§Ô∏è Weather Agent",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 1400px;
            margin: 0 auto;
        }
        .chat-container {
            height: 600px;
        }
        .session-panel {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
        }
        """
    ) as demo:
        
        gr.Markdown("""
        # üå§Ô∏è Weather Agent - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–≥–æ–¥–µ
        
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π —á–∞—Ç–∞.
        –ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω—É–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
        """)
        
        with gr.Row():
            with gr.Column(scale=3):
                # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
                chatbot = gr.Chatbot(
                    label="üí¨ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º",
                    elem_classes=["chat-container"],
                    show_label=True,
                    avatar_images=(None, "ü§ñ")
                )
                
                msg = gr.Textbox(
                    label="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?",
                    lines=2,
                    max_lines=5
                )
                
                with gr.Row():
                    send_btn = gr.Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                    clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary")
            
            with gr.Column(scale=1):
                # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
                with gr.Group(elem_classes=["session-panel"]):
                    gr.Markdown("### üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
                    
                    session_info = gr.Textbox(
                        label="–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è",
                        value="default",
                        interactive=False
                    )
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                    new_session_name = gr.Textbox(
                        label="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    )
                    create_session_btn = gr.Button("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                    
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
                    session_dropdown = gr.Dropdown(
                        label="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é",
                        choices=["default"],
                        value="default"
                    )
                    switch_btn = gr.Button("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å")
                    delete_btn = gr.Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é", variant="stop")
                    
                    # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
                    export_btn = gr.Button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏")
                    
                    session_status = gr.Textbox(
                        label="–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏",
                        value="",
                        interactive=False
                    )
                
                # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
                gr.Markdown("""
                ### üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
                - "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?"
                - "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –°–ü–±"
                - "–ü–æ–≥–æ–¥–∞ –≤ –õ–æ–Ω–¥–æ–Ω–µ –Ω–∞ 5 –¥–Ω–µ–π"
                - "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¢–æ–∫–∏–æ —Å–µ–π—á–∞—Å"
                - "–°—Ä–∞–≤–Ω–∏ –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ –∏ –ö–∏–µ–≤–µ"
                
                ### üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                –ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
                - –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
                - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
                - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
                """)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        def handle_send(message, history):
            if not message.strip():
                return "", history
            return sync_chat_wrapper(message, history)
        
        def handle_clear():
            history, status = sync_clear_wrapper()
            return history, status
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        send_btn.click(
            handle_send,
            inputs=[msg, chatbot],
            outputs=[msg, chatbot]
        )
        
        msg.submit(
            handle_send,
            inputs=[msg, chatbot],
            outputs=[msg, chatbot]
        )
        
        clear_btn.click(
            handle_clear,
            outputs=[chatbot, session_status]
        )
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–π
        create_session_btn.click(
            sync_new_session_wrapper,
            inputs=[new_session_name],
            outputs=[session_status, chatbot, session_info, session_dropdown]
        )
        
        switch_btn.click(
            sync_switch_session_wrapper,
            inputs=[session_dropdown],
            outputs=[session_status, chatbot, session_info]
        )
        
        delete_btn.click(
            sync_delete_session_wrapper,
            inputs=[session_dropdown],
            outputs=[session_status, session_info, chatbot, session_dropdown]
        )
        
        export_btn.click(
            sync_export_wrapper,
            inputs=[session_dropdown],
            outputs=[session_status]
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        create_session_btn.click(
            lambda: "",
            outputs=[new_session_name]
        )
    
    return demo


def cleanup_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global _loop, _executor, ui_instance
    
    try:
        if ui_instance and ui_instance.agent:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∞–≥–µ–Ω—Ç–∞ –≤ event loop
            if _loop and not _loop.is_closed():
                future = asyncio.run_coroutine_threadsafe(ui_instance.agent.cleanup_mcp(), _loop)
                future.result(timeout=5)
        
        if _executor:
            _executor.shutdown(wait=True)
            
        if _loop and not _loop.is_closed():
            _loop.call_soon_threadsafe(_loop.stop)
            
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Weather Agent...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        demo = create_gradio_interface()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        demo.launch(
            server_name="0.0.0.0",
            server_port=7860,
            share=False,
            debug=True,
            show_error=True,
            inbrowser=True
        )
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    finally:
        cleanup_resources()


if __name__ == "__main__":
    import atexit
    atexit.register(cleanup_resources)
    main()
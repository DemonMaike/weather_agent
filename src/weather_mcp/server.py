import sys
import logging
from pathlib import Path
from fastmcp import FastMCP
from datetime import date, datetime

root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path / 'src'))

from weather_mcp.tools.geo import GeocodingService
from weather_mcp.tools.weater import WeatherService

logging.basicConfig(level=logging.WARNING, stream=sys.stderr)

mcp = FastMCP("weather-agent")


@mcp.tool()
async def get_coord(city: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    """
    try:
        geo = GeocodingService()
        geo_result = await geo.get_coordinates(city)

        if not geo_result.get("success"):
            error_msg = geo_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            logging.error(f"Geocoding error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {error_msg}"

        geo_data = geo_result.get("data")
        if not geo_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        lat = geo_data.get("lat")
        lon = geo_data.get("lon")
        city_display_name = geo_data.get("display_name", city)

        if not lat or not lon:
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        response_text = f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city_display_name}:\n\n"
        response_text += f"üåç –®–∏—Ä–æ—Ç–∞: {lat}\n"
        response_text += f"üåç –î–æ–ª–≥–æ—Ç–∞: {lon}\n"
        response_text += f"üìç –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {city_display_name}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_coord: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {str(e)}"


@mcp.tool()
async def get_weather(lat: float, lon: float, count_days: int = 1) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

    Args:
        lat: –®–∏—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        lon: –î–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6176 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        count_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-16)
    """
    if not 1 <= count_days <= 16:
        return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 16"

    try:
        weather = WeatherService()
        weather_result = await weather.get_weather(lat, lon, count_days)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
            logging.error(f"Weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}"

        response_text = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}\n\n"

        if "current" in weather_data:
            current = weather_data["current"]
            response_text += f"üìç –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n"
            response_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature', 'N/A')}¬∞C\n"
            response_text += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current.get('wind_speed', 'N/A')} –∫–º/—á\n"
            response_text += f"üìÖ –í—Ä–µ–º—è: {current.get('time', 'N/A')}\n\n"

        if "daily_forecast" in weather_data and weather_data["daily_forecast"]:
            response_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(weather_data['daily_forecast'])} –¥–Ω.:\n"
            for day in weather_data['daily_forecast']:
                date_str = day.get('date', 'N/A')
                temp_max = day.get('temperature_max', 'N/A')
                temp_min = day.get('temperature_min', 'N/A')
                precipitation = day.get('precipitation', 'N/A')
                wind_max = day.get('wind_speed_max', 'N/A')

                response_text += f"üìÖ {date_str}:\n"
                response_text += f"  üå°Ô∏è {temp_min}¬∞C - {temp_max}¬∞C\n"
                response_text += f"  üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º\n"
                response_text += f"  üí® –ú–∞–∫—Å. –≤–µ—Ç–µ—Ä: {wind_max} –∫–º/—á\n\n"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"


# @mcp.tool()
# async def get_city_weather(city: str, count_days: int = 1) -> str:
#     """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥)
#
#     Args:
#         city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
#         count_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-16)
#     """
#     if not 1 <= count_days <= 16:
#         return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 16"
#
#     try:
#         geo = GeocodingService()
#         geo_result = await geo.get_coordinates(city)
#
#         if not geo_result.get("success"):
#             error_msg = geo_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
#             logging.error(f"Geocoding error: {error_msg}")
#             return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {error_msg}"
#
#         geo_data = geo_result.get("data")
#         if not geo_data:
#             return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"
#
#         lat = geo_data.get("lat")
#         lon = geo_data.get("lon")
#         city_display_name = geo_data.get("display_name", city)
#
#         if not lat or not lon:
#             return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"
#
#         weather = WeatherService()
#         weather_result = await weather.get_weather(lat, lon, count_days)
#
#         if not weather_result.get("success"):
#             error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
#             logging.error(f"Weather error: {error_msg}")
#             return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {error_msg}"
#
#         weather_data = weather_result.get("data")
#         if not weather_data:
#             return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"
#
#         response_text = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_display_name}\n\n"
#
#         if "current" in weather_data:
#             current = weather_data["current"]
#             response_text += f"üìç –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n"
#             response_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature', 'N/A')}¬∞C\n"
#             response_text += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current.get('wind_speed', 'N/A')} –∫–º/—á\n"
#             response_text += f"üìÖ –í—Ä–µ–º—è: {current.get('time', 'N/A')}\n\n"
#
#         if "daily_forecast" in weather_data and weather_data["daily_forecast"]:
#             response_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(weather_data['daily_forecast'])} –¥–Ω.:\n"
#             for day in weather_data['daily_forecast']:
#                 date_str = day.get('date', 'N/A')
#                 temp_max = day.get('temperature_max', 'N/A')
#                 temp_min = day.get('temperature_min', 'N/A')
#                 precipitation = day.get('precipitation', 'N/A')
#                 wind_max = day.get('wind_speed_max', 'N/A')
#
#                 response_text += f"üìÖ {date_str}:\n"
#                 response_text += f"  üå°Ô∏è {temp_min}¬∞C - {temp_max}¬∞C\n"
#                 response_text += f"  üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º\n"
#                 response_text += f"  üí® –ú–∞–∫—Å. –≤–µ—Ç–µ—Ä: {wind_max} –∫–º/—á\n\n"
#
#         if "location" in weather_data:
#             location = weather_data["location"]
#             response_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude', 'N/A')}, {location.get('longitude', 'N/A')}\n"
#             response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}"
#
#         return response_text
#
#     except Exception as e:
#         error_details = f"–û—à–∏–±–∫–∞ –≤ get_city_weather: {type(e).__name__}: {str(e)}"
#         logging.error(error_details)
#         return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"


@mcp.tool()
async def get_current_weather(lat: float, lon: float) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–±–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞)

    Args:
        lat: –®–∏—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        lon: –î–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6176 –¥–ª—è –ú–æ—Å–∫–≤—ã)
    """
    try:
        weather = WeatherService()
        weather_result = await weather.get_weather(lat, lon, forecast_days=1, include_current=True)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
            logging.error(f"Weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}"

        response_text = f"üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}\n\n"

        if "current" in weather_data:
            current = weather_data["current"]
            response_text += f"üìç –°–µ–π—á–∞—Å:\n"
            response_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature', 'N/A')}¬∞C\n"
            response_text += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current.get('wind_speed', 'N/A')} –∫–º/—á\n"
            response_text += f"üìÖ –í—Ä–µ–º—è: {current.get('time', 'N/A')}\n"
            response_text += f"üî¢ –ö–æ–¥ –ø–æ–≥–æ–¥—ã: {current.get('weather_code', 'N/A')}\n\n"
        else:
            return "‚ùå –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_current_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {str(e)}"


@mcp.tool()  
async def get_historical_weather(lat: float, lon: float, start_date: str, end_date: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

    Args:
        lat: –®–∏—Ä–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        lon: –î–æ–ª–≥–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 37.6176 –¥–ª—è –ú–æ—Å–∫–≤—ã)
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-07)
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d").date()
        except ValueError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤ –ø—Ä–æ—à–ª–æ–º
        today = date.today()
        if start_date_obj >= today or end_date_obj >= today:
            return "‚ùå –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–∞—Ç
        if start_date_obj > end_date_obj:
            return "‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
        if (end_date_obj - start_date_obj).days > 365:
            return "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: 365 –¥–Ω–µ–π"

        weather = WeatherService()
        weather_result = await weather.get_historical_weather(lat, lon, start_date_obj, end_date_obj)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            logging.error(f"Historical weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}"

        response_text = f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç {lat}, {lon}\n"
        response_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"

        if "daily_forecast" in weather_data and weather_data["daily_forecast"]:
            response_text += f"üìà –î–∞–Ω–Ω—ã–µ –∑–∞ {len(weather_data['daily_forecast'])} –¥–Ω.:\n"
            for day in weather_data['daily_forecast']:
                date_str = day.get('date', 'N/A')
                temp_max = day.get('temperature_max', 'N/A')
                temp_min = day.get('temperature_min', 'N/A')
                precipitation = day.get('precipitation', 'N/A')
                wind_max = day.get('wind_speed_max', 'N/A')

                response_text += f"üìÖ {date_str}:\n"
                response_text += f"  üå°Ô∏è {temp_min}¬∞C - {temp_max}¬∞C\n"
                response_text += f"  üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º\n"
                response_text += f"  üí® –ú–∞–∫—Å. –≤–µ—Ç–µ—Ä: {wind_max} –∫–º/—á\n\n"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_historical_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"


@mcp.tool()
async def get_city_current_weather(city: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥)

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    """
    try:
        geo = GeocodingService()
        geo_result = await geo.get_coordinates(city)

        if not geo_result.get("success"):
            error_msg = geo_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            logging.error(f"Geocoding error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {error_msg}"

        geo_data = geo_result.get("data")
        if not geo_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        lat = geo_data.get("lat")
        lon = geo_data.get("lon")
        city_display_name = geo_data.get("display_name", city)

        if not lat or not lon:
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ WeatherService
        weather = WeatherService()
        weather_result = await weather.get_weather(lat, lon, forecast_days=1, include_current=True)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
            logging.error(f"Weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        response_text = f"üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è {city_display_name}\n\n"

        if "current" in weather_data:
            current = weather_data["current"]
            response_text += f"üìç –°–µ–π—á–∞—Å:\n"
            response_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature', 'N/A')}¬∞C\n"
            response_text += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current.get('wind_speed', 'N/A')} –∫–º/—á\n"
            response_text += f"üìÖ –í—Ä–µ–º—è: {current.get('time', 'N/A')}\n"
            response_text += f"üî¢ –ö–æ–¥ –ø–æ–≥–æ–¥—ã: {current.get('weather_code', 'N/A')}\n\n"
        else:
            return "‚ùå –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}\n"
        
        response_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_city_current_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: {str(e)}"


@mcp.tool()
async def get_city_historical_weather(city: str, start_date: str, end_date: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (—É–¥–æ–±–Ω—ã–π –º–µ—Ç–æ–¥)

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-07)
    """
    try:
        geo = GeocodingService()
        geo_result = await geo.get_coordinates(city)

        if not geo_result.get("success"):
            error_msg = geo_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            logging.error(f"Geocoding error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {error_msg}"

        geo_data = geo_result.get("data")
        if not geo_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        lat = geo_data.get("lat")
        lon = geo_data.get("lon")
        city_display_name = geo_data.get("display_name", city)

        if not lat or not lon:
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start_date_obj = datetime.strptime(start_date, "%Y-%m-%d").date()
            end_date_obj = datetime.strptime(end_date, "%Y-%m-%d").date()
        except ValueError:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01)"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç—ã –≤ –ø—Ä–æ—à–ª–æ–º
        today = date.today()
        if start_date_obj >= today or end_date_obj >= today:
            return "‚ùå –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–∞—Ç
        if start_date_obj > end_date_obj:
            return "‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
        if (end_date_obj - start_date_obj).days > 365:
            return "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: 365 –¥–Ω–µ–π"

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ WeatherService
        weather = WeatherService()
        weather_result = await weather.get_historical_weather(lat, lon, start_date_obj, end_date_obj)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            logging.error(f"Historical weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        response_text = f"üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city_display_name}\n"
        response_text += f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n"

        if "daily_forecast" in weather_data and weather_data["daily_forecast"]:
            response_text += f"üìà –î–∞–Ω–Ω—ã–µ –∑–∞ {len(weather_data['daily_forecast'])} –¥–Ω.:\n"
            for day in weather_data['daily_forecast']:
                date_str = day.get('date', 'N/A')
                temp_max = day.get('temperature_max', 'N/A')
                temp_min = day.get('temperature_min', 'N/A')
                precipitation = day.get('precipitation', 'N/A')
                wind_max = day.get('wind_speed_max', 'N/A')

                response_text += f"üìÖ {date_str}:\n"
                response_text += f"  üå°Ô∏è {temp_min}¬∞C - {temp_max}¬∞C\n"
                response_text += f"  üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º\n"
                response_text += f"  üí® –ú–∞–∫—Å. –≤–µ—Ç–µ—Ä: {wind_max} –∫–º/—á\n\n"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}\n"
            
        response_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_city_historical_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"


if __name__ == "__main__":
    mcp.run()

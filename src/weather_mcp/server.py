import sys
import logging
from pathlib import Path
from fastmcp import FastMCP

root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path / 'src'))

from weather_mcp.tools.geo import GeocodingService
from weather_mcp.tools.weater import WeatherService

logging.basicConfig(level=logging.WARNING, stream=sys.stderr)

mcp = FastMCP("weather-agent")


@mcp.tool()
async def get_weather(city: str, count_days: int = 1) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        count_days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-7)
    """
    if not 1 <= count_days <= 7:
        return "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 7"

    try:
        geo = GeocodingService()
        geo_result = await geo.get_coordinates(city)

        if not geo_result.get("success"):
            error_msg = geo_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            logging.error(f"Geocoding error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {error_msg}"

        geo_data = geo_result.get("data")
        if not geo_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        lat = geo_data.get("lat")
        lon = geo_data.get("lon")
        city_display_name = geo_data.get("display_name", city)

        if not lat or not lon:
            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        weather = WeatherService()
        weather_result = await weather.get_weather(lat, lon, count_days)

        if not weather_result.get("success"):
            error_msg = weather_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã")
            logging.error(f"Weather error: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {error_msg}"

        weather_data = weather_result.get("data")
        if not weather_data:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'"

        response_text = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_display_name}\n\n"

        if "current" in weather_data:
            current = weather_data["current"]
            response_text += f"üìç –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n"
            response_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current.get('temperature', 'N/A')}¬∞C\n"
            response_text += f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current.get('wind_speed', 'N/A')} –∫–º/—á\n"
            response_text += f"üìÖ –í—Ä–µ–º—è: {current.get('time', 'N/A')}\n\n"

        if "daily_forecast" in weather_data and weather_data["daily_forecast"]:
            response_text += f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(weather_data['daily_forecast'])} –¥–Ω.:\n"
            for day in weather_data['daily_forecast']:
                date_str = day.get('date', 'N/A')
                temp_max = day.get('temperature_max', 'N/A')
                temp_min = day.get('temperature_min', 'N/A')
                precipitation = day.get('precipitation', 'N/A')
                wind_max = day.get('wind_speed_max', 'N/A')

                response_text += f"üìÖ {date_str}:\n"
                response_text += f"  üå°Ô∏è {temp_min}¬∞C - {temp_max}¬∞C\n"
                response_text += f"  üåßÔ∏è –û—Å–∞–¥–∫–∏: {precipitation} –º–º\n"
                response_text += f"  üí® –ú–∞–∫—Å. –≤–µ—Ç–µ—Ä: {wind_max} –∫–º/—á\n\n"

        if "location" in weather_data:
            location = weather_data["location"]
            response_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location.get('latitude', 'N/A')}, {location.get('longitude', 'N/A')}\n"
            response_text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location.get('timezone', 'N/A')}"

        return response_text

    except Exception as e:
        error_details = f"–û—à–∏–±–∫–∞ –≤ get_weather: {type(e).__name__}: {str(e)}"
        logging.error(error_details)
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {str(e)}"


if __name__ == "__main__":
    mcp.run()

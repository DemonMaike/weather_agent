"""
–ü—Ä–æ—Å—Ç–æ–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Weather Agent —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rich
–ñ–∏–≤–∞—è –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import asyncio
import sys
import os
from typing import Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É Weather Agent –≤ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.align import Align
from rich.layout import Layout
from rich.live import Live
from rich.prompt import Prompt, Confirm
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.markdown import Markdown
from rich import box
from rich.rule import Rule
import threading
import time

from src.agent.react_agent import create_react_agent


class WeatherAgentRichUI:
    """–ö—Ä–∞—Å–∏–≤—ã–π Rich-based –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Weather Agent"""
    
    def __init__(self):
        self.console = Console()
        self.agent = None
        self.is_agent_ready = False
        self.chat_history = []
        
    def create_header(self) -> Panel:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        title = Text("üå§Ô∏è Weather Agent - ReAct AI —Å MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π", style="bold cyan")
        subtitle = Text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", style="dim")
        
        header_content = Align.center(
            Text.assemble(title, "\n", subtitle),
            vertical="middle"
        )
        
        return Panel(
            header_content,
            box=box.ROUNDED,
            style="blue",
            height=5
        )
    
    def create_status_panel(self, status: str, mcp_status: str = "") -> Panel:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        content = Text()
        content.append("üìä –°—Ç–∞—Ç—É—Å: ", style="bold")
        content.append(status, style="green" if "–≥–æ—Ç–æ–≤" in status.lower() else "yellow")
        
        if mcp_status:
            content.append("\nüîó MCP: ", style="bold")
            content.append(mcp_status, style="green" if "–ø–æ–¥–∫–ª—é—á–µ–Ω" in mcp_status.lower() else "red")
        
        return Panel(
            content,
            title="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            box=box.ROUNDED,
            style="cyan"
        )
    
    def create_chat_panel(self) -> Panel:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —á–∞—Ç–∞"""
        if not self.chat_history:
            content = Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–≥–æ–¥–µ...", style="dim italic")
        else:
            content = Text()
            for entry in self.chat_history[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if entry['type'] == 'user':
                    content.append("üë§ –í—ã: ", style="bold blue")
                    content.append(f"{entry['message']}\n\n", style="white")
                elif entry['type'] == 'agent':
                    content.append("ü§ñ Agent: ", style="bold green")
                    content.append(f"{entry['message']}", style="white")
                    if entry.get('tools_used'):
                        content.append(f"\nüîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(entry['tools_used'])}", style="dim cyan")
                    content.append("\n\n")
                elif entry['type'] == 'system':
                    content.append("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞: ", style="bold yellow")
                    content.append(f"{entry['message']}\n\n", style="yellow")
        
        return Panel(
            content,
            title="üí¨ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º",
            box=box.ROUNDED,
            style="white",
            height=20
        )
    
    def create_help_panel(self) -> Panel:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–º–æ—â–∏"""
        help_text = """
üå§Ô∏è **–ö–æ–º–∞–Ω–¥—ã Weather Agent:**

‚Ä¢ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–≥–æ–¥–µ
‚Ä¢ `help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `clear` - –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
‚Ä¢ `quit` –∏–ª–∏ `exit` - –≤—ã–π—Ç–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?
‚Ä¢ –°—Ä–∞–≤–Ω–∏ –ø–æ–≥–æ–¥—É –≤ –õ–æ–Ω–¥–æ–Ω–µ –∏ –ü–∞—Ä–∏–∂–µ
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞
"""
        
        return Panel(
            Markdown(help_text),
            title="üìñ –°–ø—Ä–∞–≤–∫–∞",
            box=box.ROUNDED,
            style="magenta"
        )
    
    def add_message(self, message: str, msg_type: str, tools_used: List[str] = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        entry = {
            'type': msg_type,
            'message': message,
            'timestamp': time.time()
        }
        if tools_used:
            entry['tools_used'] = tools_used
        
        self.chat_history.append(entry)
    
    async def initialize_agent(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReAct –∞–≥–µ–Ω—Ç–∞"""
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console,
                transient=True
            ) as progress:
                task = progress.add_task("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReAct –∞–≥–µ–Ω—Ç–∞...", total=None)
                
                # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                original_stdout = sys.stdout
                sys.stdout = open(os.devnull, 'w') if os.name != 'nt' else open('nul', 'w')
                
                try:
                    self.agent = await create_react_agent()
                    self.is_agent_ready = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    if hasattr(self.agent, 'tools') and self.agent.tools:
                        tools_list = list(self.agent.tools.keys())
                        mcp_status = f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {', '.join(tools_list)}"
                    else:
                        mcp_status = "‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                    
                finally:
                    sys.stdout.close()
                    sys.stdout = original_stdout
                
                progress.update(task, completed=True)
            
            self.add_message("‚úÖ ReAct –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", "system")
            return True
            
        except Exception as e:
            self.add_message(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", "system")
            return False
    
    async def process_user_input(self, user_input: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if not self.is_agent_ready:
            return "‚ùå –ê–≥–µ–Ω—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
        
        try:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                console=self.console,
                transient=True
            ) as progress:
                task = progress.add_task("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...", total=None)
                
                # –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –∞–≥–µ–Ω—Ç–∞
                original_stdout = sys.stdout
                sys.stdout = open(os.devnull, 'w') if os.name != 'nt' else open('nul', 'w')
                
                try:
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    tools_used = []
                    if hasattr(self.agent, '_execute_action'):
                        original_execute = self.agent._execute_action
                        
                        def tracked_execute(action: str, action_input: str) -> str:
                            if action not in tools_used:
                                tools_used.append(action)
                            return original_execute(action, action_input)
                        
                        self.agent._execute_action = tracked_execute
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                    response = self.agent.chat(user_input)
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    if hasattr(self.agent, '_execute_action'):
                        self.agent._execute_action = original_execute
                    
                finally:
                    sys.stdout.close()
                    sys.stdout = original_stdout
                
                progress.update(task, completed=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_message(user_input, "user")
            self.add_message(response, "agent", tools_used)
            
            return response
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            self.add_message(error_msg, "system")
            return error_msg
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        self.console.print(self.create_help_panel())
        self.console.print()
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"""
        self.chat_history.clear()
        self.add_message("üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω", "system")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.console.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.console.print(self.create_header())
        self.console.print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç
        await self.initialize_agent()
        
        # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        while True:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                status = "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" if self.is_agent_ready else "‚ùå –ù–µ –≥–æ—Ç–æ–≤"
                mcp_status = "‚úÖ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω" if self.is_agent_ready else "‚ùå MCP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                
                self.console.print(self.create_status_panel(status, mcp_status))
                self.console.print()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç
                self.console.print(self.create_chat_panel())
                self.console.print()
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.console.print(Panel(
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–æ–≥–æ–¥–µ (–∏–ª–∏ 'help', 'clear', 'quit'):",
                    style="bold cyan"
                ))
                
                user_input = Prompt.ask("üå§Ô∏è", console=self.console).strip()
                
                if not user_input:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                if user_input.lower() in ['quit', 'exit', 'q']:
                    if Confirm.ask("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?", console=self.console):
                        break
                elif user_input.lower() in ['help', '–ø–æ–º–æ—â—å', 'h']:
                    self.show_help()
                    continue
                elif user_input.lower() in ['clear', '–æ—á–∏—Å—Ç–∏—Ç—å', 'c']:
                    self.clear_chat()
                    self.console.clear()
                    self.console.print(self.create_header())
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É
                await self.process_user_input(user_input)
                
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                self.console.print("\n" + "="*80 + "\n")
                
            except KeyboardInterrupt:
                if Confirm.ask("\n–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?", console=self.console):
                    break
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞: {e}[/red]")
        
        self.console.print(Panel(
            Align.center("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! Weather Agent –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É."),
            style="green"
        ))


async def run_weather_rich_ui():
    """–ó–∞–ø—É—Å–∫ Rich UI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    ui = WeatherAgentRichUI()
    await ui.run()


if __name__ == "__main__":
    try:
        asyncio.run(run_weather_rich_ui())
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
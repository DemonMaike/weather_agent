import pytest
from unittest.mock import patch, AsyncMock
import sys
from pathlib import Path
import asyncio
from datetime import date

root_path = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_path))

from fastmcp import FastMCP


def test_mcp_server_initialization_no_errors():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ FastMCP —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ 7 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ—à–∏–±–æ–∫.
    """
    try:
        with patch('src.weather_mcp.server.GeocodingService'), \
                patch('src.weather_mcp.server.WeatherService'):

            from src.weather_mcp.server import (
                mcp, get_coord, get_weather, get_city_weather,
                get_current_weather, get_historical_weather,
                get_city_current_weather, get_city_historical_weather
            )

            assert mcp is not None
            assert isinstance(mcp, FastMCP)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
            tools = [
                get_coord, get_weather, get_city_weather,
                get_current_weather, get_historical_weather,
                get_city_current_weather, get_city_historical_weather
            ]
            
            for tool in tools:
                assert hasattr(tool, 'name'), f"Tool {tool} should have a name"
                
            print("‚úÖ –í—Å–µ 7 MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FastMCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")


@pytest.mark.asyncio
async def test_get_coord_function():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_coord –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞.
    """
    with patch('src.weather_mcp.tools.geo.GeocodingService') as mock_geo_service:
        mock_service_instance = AsyncMock()
        mock_geo_service.return_value = mock_service_instance
        
        mock_service_instance.get_coordinates.return_value = {
            "success": True,
            "data": {
                "lat": 55.7558,
                "lon": 37.6176,
                "display_name": "Moscow, Russia"
            }
        }
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
        from src.weather_mcp.tools.geo import GeocodingService
        
        service = GeocodingService()
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
        service.get_coordinates = mock_service_instance.get_coordinates
        
        result = await service.get_coordinates("Moscow")
        
        assert result["success"] is True
        assert result["data"]["lat"] == 55.7558
        assert result["data"]["lon"] == 37.6176
        
        print("‚úÖ GeocodingService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_get_current_weather_function():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_current_weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã.
    """
    with patch('src.weather_mcp.server.WeatherService') as mock_weather_service:
        mock_service_instance = AsyncMock()
        mock_weather_service.return_value = mock_service_instance
        
        mock_service_instance.get_weather.return_value = {
            "success": True,
            "data": {
                "current": {
                    "temperature": 25.5,
                    "wind_speed": 10.2,
                    "time": "2025-07-29T15:00",
                    "weather_code": 0
                },
                "location": {
                    "timezone": "Europe/Moscow"
                }
            }
        }
        
        from src.weather_mcp.server import get_current_weather
        
        result = await get_current_weather(55.7558, 37.6176)
        
        assert "üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç" in result
        assert "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 25.5¬∞C" in result
        assert "üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: 10.2 –∫–º/—á" in result
        
        print("‚úÖ get_current_weather —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_get_historical_weather_function():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_historical_weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    with patch('src.weather_mcp.server.WeatherService') as mock_weather_service:
        mock_service_instance = AsyncMock()
        mock_weather_service.return_value = mock_service_instance
        
        mock_service_instance.get_historical_weather.return_value = {
            "success": True,
            "data": {
                "daily_forecast": [
                    {
                        "date": "2024-01-01",
                        "temperature_max": 5.0,
                        "temperature_min": -2.0,
                        "precipitation": 0.0,
                        "wind_speed_max": 15.0
                    },
                    {
                        "date": "2024-01-02", 
                        "temperature_max": 3.0,
                        "temperature_min": -5.0,
                        "precipitation": 2.5,
                        "wind_speed_max": 20.0
                    }
                ],
                "location": {
                    "timezone": "Europe/London"
                }
            }
        }
        
        from src.weather_mcp.server import get_historical_weather
        
        result = await get_historical_weather(51.5074, -0.1278, "2024-01-01", "2024-01-02")
        
        assert "üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ" in result
        assert "üìÖ –ü–µ—Ä–∏–æ–¥: 2024-01-01 - 2024-01-02" in result
        assert "üìÖ 2024-01-01:" in result
        assert "üå°Ô∏è -2.0¬∞C - 5.0¬∞C" in result
        
        print("‚úÖ get_historical_weather —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio 
async def test_get_city_current_weather_function():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_city_current_weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É.
    """
    with patch('src.weather_mcp.server.GeocodingService') as mock_geo_service, \
         patch('src.weather_mcp.server.WeatherService') as mock_weather_service:
        
        # –ú–æ–∫–∞–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥
        mock_geo_instance = AsyncMock()
        mock_geo_service.return_value = mock_geo_instance
        mock_geo_instance.get_coordinates.return_value = {
            "success": True,
            "data": {
                "lat": 48.8566,
                "lon": 2.3522,
                "display_name": "Paris, France"
            }
        }
        
        # –ú–æ–∫–∞–µ–º –ø–æ–≥–æ–¥—É
        mock_weather_instance = AsyncMock()
        mock_weather_service.return_value = mock_weather_instance
        mock_weather_instance.get_weather.return_value = {
            "success": True,
            "data": {
                "current": {
                    "temperature": 22.0,
                    "wind_speed": 8.5,
                    "time": "2025-07-29T16:00",
                    "weather_code": 1
                },
                "location": {
                    "timezone": "Europe/Paris"
                }
            }
        }
        
        from src.weather_mcp.server import get_city_current_weather
        
        result = await get_city_current_weather("Paris")
        
        assert "üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è Paris, France" in result
        assert "üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 22.0¬∞C" in result
        assert "üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 48.8566, 2.3522" in result
        
        print("‚úÖ get_city_current_weather —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@pytest.mark.asyncio
async def test_historical_weather_date_validation():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_historical_weather.
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    import src.weather_mcp.server as server_module
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    get_historical_weather_func = None
    for attr_name in dir(server_module):
        attr = getattr(server_module, attr_name)
        if hasattr(attr, 'name') and attr.name == 'get_historical_weather':
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ FunctionTool
            get_historical_weather_func = attr.fn
            break
    
    assert get_historical_weather_func is not None, "–§—É–Ω–∫—Ü–∏—è get_historical_weather –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    result = await get_historical_weather_func(55.7558, 37.6176, "2024/01/01", "2024/01/02")
    assert "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã" in result
    
    # –¢–µ—Å—Ç –¥–∞—Ç –≤ –±—É–¥—É—â–µ–º
    result = await get_historical_weather_func(55.7558, 37.6176, "2030-01-01", "2030-01-02")
    assert "‚ùå –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç" in result
    
    # –¢–µ—Å—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–∞—Ç
    result = await get_historical_weather_func(55.7558, 37.6176, "2024-01-02", "2024-01-01")
    assert "‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π" in result
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def test_all_tools_count():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ 7 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã.
    """
    with patch('src.weather_mcp.server.GeocodingService'), \
            patch('src.weather_mcp.server.WeatherService'):
        
        from src.weather_mcp.server import (
            get_coord, get_weather, get_city_weather,
            get_current_weather, get_historical_weather,
            get_city_current_weather, get_city_historical_weather
        )
        
        tools = [
            get_coord, get_weather, get_city_weather,
            get_current_weather, get_historical_weather,
            get_city_current_weather, get_city_historical_weather
        ]
        
        assert len(tools) == 7, f"–û–∂–∏–¥–∞–ª–æ—Å—å 7 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(tools)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω
        tool_names = [tool.name for tool in tools]
        assert len(set(tool_names)) == 7, "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞"
        
        print("‚úÖ –í—Å–µ 7 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞")
